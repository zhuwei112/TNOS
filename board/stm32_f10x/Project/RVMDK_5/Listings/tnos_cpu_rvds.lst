


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ; File      : 开源 GPLV2协议
    4 00000000         ; Version   : V1.0.1
    5 00000000         ; By        : wlison zhu
    6 00000000         ; For       : ARMv7M Cortex-M3
    7 00000000         ; Mode      : Thumb2
    8 00000000         ; Toolchain : Keil uVision
    9 00000000         ;*******************************************************
                       *************************************************
   10 00000000         
   11 00000000         
   12 00000000                 IMPORT           gs_ptnos_tcb_cur ;cur run tcb
   13 00000000                 IMPORT           gs_ptnos_tcb_ready 
                                                            ;ready run tcb
   14 00000000         
   15 00000000                 EXPORT           PendSV_Handler ;pend svc
   16 00000000         
   17 00000000         
   18 00000000         
   19 00000000         ;*******************************************************
                       *************************************************
   20 00000000         ;                                               EQUATES
   21 00000000         ;*******************************************************
                       *************************************************
   22 00000000                 PRESERVE8
   23 00000000                 THUMB
   24 00000000         
   25 00000000                 AREA             CODE, CODE, READONLY
   26 00000000         
   27 00000000         
   28 00000000         ;IMPORT  xprintf_put_char
   29 00000000         ;*******************************************************
                       *************************************************
   30 00000000         ;                                   void PendSV_Handler(
                       void)
   31 00000000         ;*******************************************************
                       *************************************************
   32 00000000         PendSV_Handler
                               PROC
   33 00000000         ;MOVS    r0, #64
   34 00000000         ;PUSH    {LR}
   35 00000000         ;BL.W     xprintf_put_char
   36 00000000         ;POP     {LR}
   37 00000000         
   38 00000000 4A14            LDR              R2, =gs_ptnos_tcb_cur
   39 00000002 F3EF 8009       MRS              R0, PSP
   40 00000006 B120            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ;Skip register save
                                                             the first time
   41 00000008         
   42 00000008 3820            SUBS             R0, R0, #0x20 ;Save remaining r
                                                            egs r4-11 on proces
                                                            s stack
   43 0000000A E880 0FF0       STM              R0, {R4-R11}
   44 0000000E         
   45 0000000E 6811            LDR              R1, [R2]



ARM Macro Assembler    Page 2 


   46 00000010 6008            STR              R0, [R1]    ;gs_ptnos_tcb_cur->
                                                            pstk = SP;
   47 00000012         
   48 00000012         OS_CPU_PendSVHandler_nosave
   49 00000012 4911            LDR              R1, =gs_ptnos_tcb_ready ;gs_ptn
                                                            os_tcb_cur = gs_ptn
                                                            os_tcb_ready;
   50 00000014 6808            LDR              R0, [R1]
   51 00000016 6010            STR              R0, [R2]
   52 00000018 6800            LDR              R0, [R0]
   53 0000001A         
   54 0000001A E890 0FF0       LDM              R0, {R4-R11} ;Restore r4-11 fro
                                                            m new process stack
                                                            
   55 0000001E 3020            ADDS             R0, R0, #0x20
   56 00000020 F380 8809       MSR              PSP, R0     ;Load PSP with new 
                                                            process SP
   57 00000024         
   58 00000024 F04E 0E04       ORR              LR, LR, #0x04 ;Ensure exception
                                                             return uses proces
                                                            s stack
   59 00000028         
   60 00000028 B662            CPSIE            I
   61 0000002A 4770            BX               LR          ;Exception return w
                                                            ill restore remaini
                                                            ng context
   62 0000002C                 ENDP
   63 0000002C         
   64 0000002C         
   65 0000002C         
   66 0000002C         hardfault_handler_proc
                               PROC
   67 0000002C                 EXPORT           hardfault_handler_proc         
       [WEAK]
   68 0000002C E7FE            B                .
   69 0000002E                 ENDP
   70 0000002E         
   71 0000002E         ;*******************************************************
                       *************************************************
   72 0000002E         ;              HardFault_Handler
   73 0000002E         ;*******************************************************
                       *************************************************
   74 0000002E                 EXPORT           HardFault_Handler
   75 0000002E         HardFault_Handler
                               PROC
   76 0000002E F01E 0F04       TST              lr, #0x04   ; if(!EXC_RETURN[2]
                                                            )
   77 00000032 BF14 F3EF 
              8008             MRSNE            r0, msp     ; get fault context
                                                             from handler.
   78 00000038 F3EF 8009       MRSEQ            r0, psp     ; get fault context
                                                             from thread.
   79 0000003C         
   80 0000003C E920 0FF0       STMFD            r0!, {r4 - r11} ; push r4 - r11
                                                             register
   81 00000040 F840 ED04       STMFD            r0!, {lr}   ; push exec_return 
                                                            register
   82 00000044         
   83 00000044 BF14 F380 



ARM Macro Assembler    Page 3 


              8808             MSRNE            msp, r0     ; update stack poin
                                                            ter to MSP.
   84 0000004A F380 8809       MSREQ            psp, r0     ; update stack poin
                                                            ter to PSP.
   85 0000004E         
   86 0000004E F7FF FFFE       BL               hardfault_handler_proc
   87 00000052 E7FE            B                .
   88 00000054                 ENDP
   89 00000054         
   90 00000054                 ALIGN            4
   91 00000054         
   92 00000054                 END
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\tnos_cpu_rvds.d -o.\objects\tnos_cpu_rvds.o -ID:\vmShare
\source\stm32\tnos_git\TNOS\board\stm32_f10x\Project\RVMDK_5\RTE -IC:\Keil_v5\A
RM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include 
--predefine="__UVISION_VERSION SETA 515" --predefine="STM32F10X_HD SETA 1" --li
st=.\listings\tnos_cpu_rvds.lst ..\..\..\..\tnos\lib_cpu\arm\cortex-m3\tnos_cpu
_rvds.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CODE 00000000

Symbol: CODE
   Definitions
      At line 25 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m3\tnos_cpu_rvds.S
   Uses
      None
Comment: CODE unused
HardFault_Handler 0000002E

Symbol: HardFault_Handler
   Definitions
      At line 75 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m3\tnos_cpu_rvds.S
   Uses
      At line 74 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m3\tnos_cpu_rvds.S
Comment: HardFault_Handler used once
OS_CPU_PendSVHandler_nosave 00000012

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 48 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m3\tnos_cpu_rvds.S
   Uses
      At line 40 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m3\tnos_cpu_rvds.S
Comment: OS_CPU_PendSVHandler_nosave used once
PendSV_Handler 00000000

Symbol: PendSV_Handler
   Definitions
      At line 32 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m3\tnos_cpu_rvds.S
   Uses
      At line 15 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m3\tnos_cpu_rvds.S
Comment: PendSV_Handler used once
hardfault_handler_proc 0000002C

Symbol: hardfault_handler_proc
   Definitions
      At line 66 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m3\tnos_cpu_rvds.S
   Uses
      At line 67 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m3\tnos_cpu_rvds.S
      At line 86 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m3\tnos_cpu_rvds.S

5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

gs_ptnos_tcb_cur 00000000

Symbol: gs_ptnos_tcb_cur
   Definitions
      At line 12 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m3\tnos_cpu_rvds.S
   Uses
      At line 38 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m3\tnos_cpu_rvds.S
Comment: gs_ptnos_tcb_cur used once
gs_ptnos_tcb_ready 00000000

Symbol: gs_ptnos_tcb_ready
   Definitions
      At line 13 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m3\tnos_cpu_rvds.S
   Uses
      At line 49 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m3\tnos_cpu_rvds.S
Comment: gs_ptnos_tcb_ready used once
2 symbols
341 symbols in table
