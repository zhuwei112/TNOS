


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ; File      : ¿ªÔ´ GPLV2Ð­Òé
    4 00000000         ; Version   : V1.0.1
    5 00000000         ; By        : wlison zhu
    6 00000000         ; For       : ARMv7M Cortex-M3
    7 00000000         ; Mode      : Thumb2
    8 00000000         ; Toolchain : Keil uVision
    9 00000000         ;*******************************************************
                       *************************************************
   10 00000000         
   11 00000000         
   12 00000000                 IMPORT           gs_ptnos_tcb_cur ;cur run tcb
   13 00000000                 IMPORT           gs_ptnos_tcb_ready 
                                                            ;ready run tcb
   14 00000000         
   15 00000000         ;EXPORT  tnos_start_rdy               ;strart run
   16 00000000                 EXPORT           PendSV_Handler ;pend svc
   17 00000000         
   18 00000000         
   19 00000000         ;*******************************************************
                       *************************************************
   20 00000000         ;                                               EQUATES
   21 00000000         ;*******************************************************
                       *************************************************
   22 00000000         
   23 00000000                 PRESERVE8
   24 00000000                 THUMB
   25 00000000         
   26 00000000                 AREA             CODE, CODE, READONLY
   27 00000000         
   28 00000000         
   29 00000000         ;*******************************************************
                       *************************************************
   30 00000000         ;                                      void tnos_start_r
                       dy(void)
   31 00000000         ; Note(s) : first task to start
   32 00000000         ;           a. set priority for PendSV (lowest)
   33 00000000         ;           b. PSP=0 (for frist PendSV)
   34 00000000         ;           c. restore MSP
   35 00000000         ;           d. triggers PendSV
   36 00000000         ;           e. enable irq
   37 00000000         ;*******************************************************
                       *************************************************
   38 00000000         
   39 00000000         
   40 00000000         ;IMPORT  xprintf_put_char
   41 00000000         
   42 00000000         ;*******************************************************
                       *************************************************
   43 00000000         ;                                   void PendSV_Handler(
                       void)
   44 00000000         ;*******************************************************
                       *************************************************
   45 00000000         PendSV_Handler
                               PROC
   46 00000000 F3EF 8310       MRS              R3, PRIMASK
   47 00000004 B672            CPSID            I



ARM Macro Assembler    Page 2 


   48 00000006 2040            MOVS             r0, #64
   49 00000008         ;PUSH    {LR}
   50 00000008         ;BL.W     xprintf_put_char
   51 00000008         ;POP     {LR}
   52 00000008 4A1A            LDR              R2, =gs_ptnos_tcb_cur
   53 0000000A F3EF 8009       MRS              R0, PSP
   54 0000000E 2800            CMP              R0, #0x00
   55 00000010 D008            BEQ              OS_CPU_PendSVHandler_nosave ;Sk
                                                            ip register save th
                                                            e first time
   56 00000012         
   57 00000012 3820            SUBS             R0, R0, #0x20 ;Save remaining r
                                                            egs r4-11 on proces
                                                            s stack
   58 00000014 6811            LDR              R1, [R2]
   59 00000016 6008            STR              R0, [R1]    ;gs_ptnos_tcb_cur->
                                                            pstk = SP;
   60 00000018         
   61 00000018 C0F0            STMIA            R0!, {R4 - R7} ;½«R4~R7ÈëÕ»
   62 0000001A 4644            MOV              R4, R8
   63 0000001C 464D            MOV              R5, R9
   64 0000001E 4656            MOV              R6, R10
   65 00000020 465F            MOV              R7, R11
   66 00000022 C0F0            STMIA            R0!, {R4 - R7} ;½«R8~R11ÈëÕ»
   67 00000024         
   68 00000024         
   69 00000024         OS_CPU_PendSVHandler_nosave
   70 00000024 4914            LDR              R1, =gs_ptnos_tcb_ready ;gs_ptn
                                                            os_tcb_cur = gs_ptn
                                                            os_tcb_ready;
   71 00000026 6808            LDR              R0, [R1]
   72 00000028 6010            STR              R0, [R2]
   73 0000002A 6800            LDR              R0, [R0]
   74 0000002C         
   75 0000002C 4601            MOV              R1, R0
   76 0000002E 3010            ADDS             R0, R0, #16 ;»Ö¸´ (R8-R11)
   77 00000030 C8F0            LDMIA            R0!, {R4-R7}
   78 00000032 46A0            MOV              R8, R4
   79 00000034 46A9            MOV              R9, R5
   80 00000036 46B2            MOV              R10, R6
   81 00000038 46BB            MOV              R11, R7
   82 0000003A C9F0            LDMIA            R1!, {R4 - R7} ;»Ö¸´ (R4-R7)
   83 0000003C F380 8809       MSR              PSP, R0     ;½«ÐÂµÄSP¸üÐÂµ½PSPÖ
                                                            Ð
   84 00000040         
   85 00000040 2004            MOVS             R0, #0x04
   86 00000042 4240            RSBS             R0, R0, #0x00
   87 00000044         
   88 00000044         ;LDM     R0, {R4-R11}                                   
                            ;Restore r4-11 from new process stack
   89 00000044         ;ADDS    R0, R0, #0x20
   90 00000044         ;MSR     PSP, R0                                        
                            ;Load PSP with new process SP
   91 00000044         ;ORR     LR, LR, #0x04                                  
                            ;Ensure exception return uses process stack
   92 00000044         
   93 00000044 F383 8810       MSR              PRIMASK, R3
   94 00000048 4700            BX               R0
   95 0000004A         ;BX      LR                                             



ARM Macro Assembler    Page 3 


                            ;Exception return will restore remaining context
   96 0000004A                 ENDP
   97 0000004A         
   98 0000004A         
   99 0000004A         
  100 0000004A         hardfault_handler_proc
                               PROC
  101 0000004A                 EXPORT           hardfault_handler_proc         
       [WEAK]
  102 0000004A E7FE            B                .
  103 0000004C                 ENDP
  104 0000004C         
  105 0000004C         ;*******************************************************
                       *************************************************
  106 0000004C         ;              HardFault_Handler
  107 0000004C         ;*******************************************************
                       *************************************************
  108 0000004C                 EXPORT           HardFault_Handler
  109 0000004C         HardFault_Handler
                               PROC
  110 0000004C F3EF 8008       MRS              R0, MSP
  111 00000050 4671            MOV              R1, LR
  112 00000052 2204            MOVS             R2, #04
  113 00000054 4011            ANDS             R1, R1, R2
  114 00000056 2900            CMP              R1, #0
  115 00000058 D001            BEQ              hf0
  116 0000005A F3EF 8009       MRS              R0, PSP
  117 0000005E         hf0
  118 0000005E 3820            SUBS             R0, R0, #0x20
  119 00000060 C0F0            STMIA            R0!, {R4 - R7} ;½«R4~R7ÈëÕ»
  120 00000062 4644            MOV              R4, R8
  121 00000064 464D            MOV              R5, R9
  122 00000066 4656            MOV              R6, R10
  123 00000068 465F            MOV              R7, R11
  124 0000006A C0F0            STMIA            R0!, {R4 - R7} ;½«R8~R11ÈëÕ»
  125 0000006C         
  126 0000006C F7FF FFFE       BL               hardfault_handler_proc
  127 00000070 E7FE            B                .
  128 00000072         
  129 00000072                 ENDP
  130 00000072         
  131 00000072 00 00           ALIGN            4
  132 00000074         
  133 00000074                 END
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=inter
work --depend=.\objects\tnos_cpu_rvds.d -o.\objects\tnos_cpu_rvds.o -ID:\vmShar
e\source\stm32\tnos_git\TNOS\board\stm32_l0\Project\RVMDK_5\RTE -IC:\Keil_v5\AR
M\PACK\Keil\STM32L0xx_DFP\1.6.1\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -
-predefine="__UVISION_VERSION SETA 515" --predefine="STM32L073xx SETA 1" --list
=.\listings\tnos_cpu_rvds.lst ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_r
vds.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CODE 00000000

Symbol: CODE
   Definitions
      At line 26 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_rvds.S
   Uses
      None
Comment: CODE unused
HardFault_Handler 0000004C

Symbol: HardFault_Handler
   Definitions
      At line 109 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_rvds.
S
   Uses
      At line 108 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_rvds.
S
Comment: HardFault_Handler used once
OS_CPU_PendSVHandler_nosave 00000024

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 69 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_rvds.S
   Uses
      At line 55 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_rvds.S
Comment: OS_CPU_PendSVHandler_nosave used once
PendSV_Handler 00000000

Symbol: PendSV_Handler
   Definitions
      At line 45 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_rvds.S
   Uses
      At line 16 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_rvds.S
Comment: PendSV_Handler used once
hardfault_handler_proc 0000004A

Symbol: hardfault_handler_proc
   Definitions
      At line 100 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_rvds.
S
   Uses
      At line 101 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_rvds.
S
      At line 126 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_rvds.
S

hf0 0000005E

Symbol: hf0
   Definitions
      At line 117 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_rvds.
S
   Uses
      At line 115 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_rvds.
S
Comment: hf0 used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

gs_ptnos_tcb_cur 00000000

Symbol: gs_ptnos_tcb_cur
   Definitions
      At line 12 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_rvds.S
   Uses
      At line 52 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_rvds.S
Comment: gs_ptnos_tcb_cur used once
gs_ptnos_tcb_ready 00000000

Symbol: gs_ptnos_tcb_ready
   Definitions
      At line 13 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_rvds.S
   Uses
      At line 70 in file ..\..\..\..\tnos\lib_cpu\arm\cortex-m0\tnos_cpu_rvds.S
Comment: gs_ptnos_tcb_ready used once
2 symbols
342 symbols in table
