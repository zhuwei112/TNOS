/***********************************************************
 * 版权信息:开源 GPLV2协议
 * 文件名称: tnos.h
 * 文件作者: 朱巍
 * 完成日期:
 * 当前版本: 1.0.0
 * 主要功能: 系统 头文件
 * 版本历史:
 ***********************************************************/
#ifndef TNOS_H__
#define TNOS_H__


#include "tnos_def.h"
#include "clist.h"

#include "tnos_cfg.h"
#include "xtimer.h"

/************************************
 * 高优先级能中断低优先级
 * 同优先级时间片算法(时间片未用完不切换任务)
 * 时间片算法: 任务切换时  1:时间片没有完,继续使用剩余时间
 *                       2:时间片用完,且下一个任务为空闲任务,不调度
 *          重新分配时间片函数: 定时调度, 信号唤醒, 任务准备运行队列为空,延时调用
**************************/

//错误定义
//负数为错误, 0正确
#define TNOS_ERR_NONE     0  //没有错误
#define TNOS_ERR_ARG     -1  //参数错误
#define TNOS_ERR_TIMEOUT -2  //超时错误
#define TNOS_ERR_OTHER   -3  //其它错误
#define TNOS_ERR_FULL    -4  //队列已满
#define TNOS_ERR_LESS    -5  //队列剩余空间不足
#define TNOS_ERR_BUG     -15  //bug!!!

typedef enum
{
    TNOS_PRO_HIGHEST = 0, //最高优先级            //接收到信号(无特性情况,不允许设置任务为该优先级)
	TNOS_PRO_HIGH,        //高优先级
	TNOS_PRO_MID,         //中优先级 (默认为该优先级)
	TNOS_PRO_LOW,         //低优先级
}tnos_pro_t;


#define TNOS_PRO_MAX    4//最大的优先级个数

//任务函数
typedef void (*ptnos_task)(void *p_arg);

struct tnos_tcb_arg;

//等待信号
typedef struct
{
    list_t               list;  //等待该信号的链表
    struct tnos_tcb_arg *ptab;  //等待该信号的任务
}tnos_singal_wait_t;

//信号控制
typedef struct
{
    list_t list_wait_head;         //等待信号列表的头部
    u32    send_num;               //发送的次数, 0没有
}tnos_singal_t;

typedef struct tnos_tcb_arg
{
    u32   *pstk;                //堆的地址(位置偏移必须为0!!)
    list_t list_run;            //运行状态链表
    list_t list_delay;          //延迟超时队列中
    struct tnos_tcb_arg *ptcb_next;  //下一个任务的位置


#if (TNOS_STK_CHECK != 0)
     u32    *stk_addr;      //堆的位置
     u32     stk_size;      //堆栈大小
     time_tick_t  tick_start;
     u16          ms_cpu_once;  //1次统计占用cpu时间
     u16          ms_cpu_use;    //使用的值
#endif

    ttimer_t tm;           //定时时间
    u8       is_timeout_del; //超时删除任务等待
    u8       mss;            //时间片
    u8       ms_less;        //剩余时间片时间
    u8       pro;       //优先级
    char     name[TNOS_STK_NAME_SIZE];   //任务名字
}tnos_tcb_t;


#if (TNOS_SEM_ENABLE != 0)
typedef struct
{
    tnos_singal_t singal; //信号
}tnos_sem_t;
#endif


#if (TNOS_MUTEX_ENABLE != 0)
typedef struct
{
    tnos_tcb_t    *ptcb_send;  //发送任务的tcp
    u32           lock_cnt;    //锁上的次数

    //必须放到最后
    tnos_singal_t singal;       //信号
}tnos_mutex_t;
#endif

#if (TNOS_MSGQ_ENABLE != 0)
//保证所有队列中的数据4字节对齐
typedef struct
{
    u16 pos_next; //下一个的位置
    u16 len;      //长度
}tnos_msgq_data_t;

typedef struct
{
    tnos_singal_t   singal;     //信号
    u8             *pbuf;       //缓冲去起始位置(4字节对齐的位置)
    u16             size;       //一条消息最大大小
    u16             num_max;    //消息最大条数
    u16             pos_head;   //头部位置
    u16             pos_tail;   //尾部位置
    u16             pos_empty;  //空的位置
}tnos_msgq_t;
#endif

#if (TNOS_MSGCYC_ENABLE != 0)
//保证所有队列中的数据4字节对齐
typedef struct
{
    u16 pos_next; //下一个的位置
    u16 len;      //长度 (为0,表示为空)
}tnos_msgcyc_data_t;

typedef struct
{
    tnos_singal_t   singal;     //信号
    u8             *pbuf;       //缓冲去起始位置(4字节对齐的位置)
    u16             buf_size;   //缓冲区大小
    u16             pos_w;      //写的位置(一定为4的倍数)
    u16             pos_r;      //读的位置(一定为4的倍数)
}tnos_msgcyc_t;
#endif


/***********************************************************
 * 功能描述：板子应用初始化
 * 输入参数：无
 * 输出参数： 无
 * 返 回 值：  无
 ***********************************************************/
void tnos_app_init(void);

/***********************************************************
 * 功能描述：系统启动
 * 输入参数：无
 * 输出参数： 无
 * 返 回 值：  无
 ***********************************************************/
void tnos_startup(void);

/***********************************************************
 * 功能描述：创建任务
 * 输入参数：ptcb     任务参数
 *          pname    名字
 *          pro      任务的优先级
 *          mss      时间片,单位ms 最大255
 *          task     任务函数名
 *          parg     任务传递参数
 *          stk_addr 堆栈起始地址
 *          stk_size 堆栈大小
 * 输出参数： 无
 * 返 回 值：  0成功, 其它失败
 ***********************************************************/
s32 tnos_task_create(tnos_tcb_t *ptcb, const char *pname, tnos_pro_t pro, u8 mss,
                     ptnos_task task, void *parg, u32 *stk_addr, u16 stk_size);

/***********************************************************
 * 功能描述：获取当前任务名字
 * 输入参数：无
 * 输出参数： 无
 * 返 回 值：  名字
 ***********************************************************/
const char* tnos_name(void);

/***********************************************************
 * 功能描述：设置任务优先级
 * 输入参数：ptcb     任务参数
 *        pro      优先级
 * 输出参数： 无
 * 返 回 值：  0:成功 其它:失败
 ***********************************************************/
s32 tnos_set_pro(tnos_tcb_t *ptcb, tnos_pro_t pro);

/***********************************************************
 * 功能描述：获取当前的优先级
 * 输入参数：ptcb     任务参数
 * 输出参数： 无
 * 返 回 值：  返回优先级
 ***********************************************************/
INLINE__ tnos_pro_t tnos_get_pro(tnos_tcb_t *ptcb)
{
    return (tnos_pro_t)ptcb->pro;
}

/***********************************************************
 * 功能描述：设置时间片
 * 输入参数：ptcb     任务参数
 *        ms       时间片时间,单位ms
 * 输出参数： 无
 * 返 回 值： 0:成功 其它:失败
 ***********************************************************/
s32 tnos_set_mss(tnos_tcb_t *ptcb, u8 ms);

/***********************************************************
 * 功能描述：获取时间片
 * 输入参数：ptcb     任务参数
 * 输出参数： 无
 * 返 回 值： 时间片
 ***********************************************************/
INLINE__ u32 tnos_get_mss(tnos_tcb_t *ptcb)
{
	return ptcb->mss;
}

/***********************************************************
 * 功能描述： 进入中断函数 (调用tnos相关函数的中断需要写) (定时器调度函数自带检查)
 * 输入参数：无
 * 输出参数： 无
 * 返 回 值：  无
 ***********************************************************/
void tnos_interrupt_enter(void);

/***********************************************************
 * 功能描述： 退出中断函数 (调用tnos相关函数的中断需要写)(定时器调度函数自带检查)
 * 输入参数：无
 * 输出参数： 无
 * 返 回 值：  无
 ***********************************************************/
void tnos_interrupt_exit(void);

/***********************************************************
 * 功能描述：调度 禁止(任务调用)
 * 输入参数：无
 * 输出参数： 无
 * 返 回 值：  无
 ***********************************************************/
void tnos_sched_lock(void);

/***********************************************************
 * 功能描述：调度 解锁(任务调用)
 * 输入参数：无
 * 输出参数： 无
 * 返 回 值：  无
 ***********************************************************/
void tnos_sched_unlock(void);

/***********************************************************
 * 功能描述：调度(任务调用)
 * 输入参数：无
 * 输出参数： 无
 * 返 回 值：  无
 ***********************************************************/
void tnos_sched(void);


/***********************************************************
 * 功能描述：等待ms时间(任务调用)
 * 输入参数：delay_ms  ms时间
 * 输出参数： 无
 * 返 回 值：  无
 ***********************************************************/
void tnos_delay_ms(u32 delay_ms);

/***********************************************************
 * 功能描述：滴答时间运行处理(中断运行,外部需要禁止中断!!!)
 * 输入参数：无
 * 输出参数： 无
 * 返 回 值：  无
 ***********************************************************/
void tnos_tick_proess(void);

/***********************************************************
 * 功能描述：任务返回(防止任务不为死循环退出引起错误)
 * 输入参数：无
 * 输出参数： 无
 * 返 回 值：  无
 ***********************************************************/
void tnos_task_return(void);


//监听多个信号结构
typedef struct
{
    tnos_singal_t     *psingal;    //需要监听的信号(外部填充)
    tnos_singal_wait_t singal_wait;
}tnos_select_t;

/***********************************************************
 * 功能描述：监听多个信号(只检查信号有没有,不清空标志)
 * 输入参数：psel 信号指针数组
 *          arary_num    数组的维数
 *          delay_ms     延迟时间
 * 输出参数： 无
 * 返 回 值：  有信号的位置 >=0成功,  其它失败, -1 超时, -2:参数错误
 ***********************************************************/
s32 tnos_select(tnos_select_t *psel, u32 arary_num, u32 delay_ms);



#if (TNOS_MUTEX_ENABLE != 0)

/***********************************************************
 * 功能描述：互斥锁 初始化
 * 输入参数：pmutex 互斥锁
 * 输出参数： 无
 * 返 回 值：  0:成功 其它:失败
 ***********************************************************/
s32 tnos_mutex_init(tnos_mutex_t *pmutex);

/***********************************************************
 * 功能描述：互斥锁 上锁 (支持锁嵌套,可多次锁,中断不能调用)
 * 输入参数：pmutex 互斥锁
 * 输出参数： 无
 * 返 回 值：  无
 ***********************************************************/
void tnos_mutex_lock(tnos_mutex_t *pmutex);

/***********************************************************
 * 功能描述：互斥锁 尝试上锁 (支持锁嵌套,可多次锁,中断不能调用)
 * 输入参数：pmutex 互斥锁
 *          timeout_ms 超时时间
 * 输出参数： 无
 * 返 回 值：  0:成功 其它:失败
 ***********************************************************/
s32 tnos_mutex_trylock(tnos_mutex_t *pmutex, u32 timeout_ms);

/***********************************************************
 * 功能描述：互斥锁 解锁 (支持锁嵌套,中断不能调用)
 * 输入参数：pmutex 互斥锁
 * 输出参数：无
 * 返 回 值：  无
 ***********************************************************/
void tnos_mutex_unlock(tnos_mutex_t *pmutex);

#endif

#if (TNOS_SEM_ENABLE != 0)
/***********************************************************
 * 功能描述：获取系统滴答时钟
 * 输入参数：psem 信号量
 *           cnt 初始计数值
 * 输出参数： 无
 * 返 回 值：   0:成功 其它:失败
 ***********************************************************/
s32 tnos_sem_init(tnos_sem_t *psem, u32 cnt);

/***********************************************************
 * 功能描述：获取系统滴答时钟
 * 输入参数：psem 信号量
 *           cnt 初始计数值
 * 输出参数： 无
 * 返 回 值： 无
 ***********************************************************/
void tnos_sem_post(tnos_sem_t *psem);

/***********************************************************
 * 功能描述：信号量等待(中断中不允许调用!!)
 * 输入参数：psingal 信号结构体
 *          timeout_ms 超时ms时间
 * 输出参数： 无
 * 返 回 值：  当前信号量计数, > 0 有, 其它失败
 ***********************************************************/
s32 tnos_sem_wait(tnos_sem_t *psem, u32 timeout_ms);

/***********************************************************
 * 功能描述：信号量等待(中断中不允许调用!!)
 * 输入参数：psingal 信号结构体
 * 输出参数： 情况等待次数
 * 返 回 值：  无
 ***********************************************************/
void tnos_sem_clean(tnos_sem_t *psem);

#endif


#if (TNOS_MSGQ_ENABLE != 0) //消息队列
/******************************
 * 不允许发长度为0的数据(发送不出去)
 * 提供2种发送方法:
 * 法1: 带缓存保护方法 tnos_msgq_send 或 tnos_msgq_send_frist (需要多次复制和额外的缓冲区)
 * 法2: 不带缓冲区保护方法 (可以修改对的数据, 数据长度不能超过 msg_size,否则队列崩溃)
 *        step1- 获取可用的队列 tnos_msgq_send_ptr
 *        step2- 获取成功(返回 0), 写数据到队列指针中 (TNOS_MSGQ_GET_BUF 获取写的起始位置)
 *        step3- 发送队列 tnos_msgq_send_ptr_next
 *
 *
 * 提供2种接收方法:
 * 法1: 带缓存保护方法 tnos_msgq_rev (需要多次复制和额外的缓冲区)
 * 法2: 不带缓冲区保护方法 (可以修改对的数据, 数据长度不能超过 msg_size,否则队列崩溃)
 *        step1- 获取读取队列tnos_msgq_get_rev_ptr
 *        step2- 获取成功(返回长度 > 0),读取内容(TNOS_MSGQ_GET_BUF 获取读取的起始位置)
 *        step3-释放队列 tnos_msgq_rev_ptr_next
 ***************************/


/***********************************************************
 * 功能描述 消息队列 初始化
 * 输入参数：pmsgq    消息队列
 *          pbuf      缓冲区起始位置
 *          buf_size  缓冲区大小
 *          msg_size  一条消息最大大小
 * 输出参数： 无
 * 返 回 值：  0:成功 其它:失败
 * 注释:消息的个数为 (((buf_size+3)/4)*4)/(sizeof(tnos_msgq_data_t) + ((msg_size +3/4)*4)))
 ***********************************************************/
s32 tnos_msgq_init(tnos_msgq_t *pmsgq, u32 msg_size, void *pbuf, u32 buf_size);

/***********************************************************
 * 功能描述 消息队列 获取  一条消息最大长度
 * 输入参数：pmsgq    消息队列
 * 输出参数： 无
 * 返 回 值：  一条消息最大长度
 ***********************************************************/
INLINE__ u32 tnos_get_msg_size(tnos_msgq_t *pmsgq)
{
    return pmsgq->size;
}

/***********************************************************
 * 功能描述 消息队列 获取  队列最大的个数
 * 输入参数：pmsgq    消息队列
 * 输出参数： 无
 * 返 回 值：  一条消息最大长度
 ***********************************************************/
INLINE__ u32 tnos_get_num_max(tnos_msgq_t *pmsgq)
{
    return pmsgq->num_max;
}

/***********************************************************
 * 功能描述：消息队列 发送数据(先进先出)
 * 输入参数：pmsgq 消息队列
 *          pbuf   发送数据缓冲区
 *          len    发送数据长度
 * 输出参数： 无
 * 返 回 值： 0:成功 其它:失败
 ***********************************************************/
s32 tnos_msgq_send(tnos_msgq_t *pmsgq, const void *pbuf, u32 len);

/***********************************************************
 * 功能描述：消息队列 发送数据(先进后出)
 * 输入参数：pmsgq 消息队列
 *          pbuf   发送数据缓冲区
 *          len    发送数据长度
 * 输出参数： 无
 * 返 回 值： 0:成功 其它:失败
 ***********************************************************/
s32 tnos_msgq_send_frist(tnos_msgq_t *pmsgq, const void *pbuf, u32 len);

/***********************************************************
 * 功能描述：消息队列 接收数据
 * 输入参数：pmsgq 消息队列
 *          buf_len  接收数据的长度
 *          timeout_ms 超时时间
 * 输出参数： pbuf 接收数据缓冲区
 * 返 回 值：  接收数据的长度,  负数和0失败
 ***********************************************************/
s32 tnos_msgq_rev(tnos_msgq_t *pmsgq, void *pbuf, u32 buf_len, u32 timeout_ms);


//获取队列数据保存的起始位置
//type 需要转换后的类型  pmsgq_data 队列数据指针
#define TNOS_MSGQ_GET_BUF(type, pmsgq_data)  ((type)((tnos_msgq_data_t *)pmsgq_data + 1))


/***********************************************************
 * 功能描述：消息队列 发送数据指针获取 (法2:获取发送指针)
 * 输入参数：pmsgq 消息队列
 * 输出参数： pmsgq_data 队列数据指针
 * 返 回 值： 0:成功  其它:失败
 * 注意: (返回 == 0时,一定要调用 tnos_msgq_send_ptr_next ,否则队列泄露)
 *       写数据时:长度不能超过msg_size 否则队列崩溃
 ***********************************************************/
s32 tnos_msgq_send_ptr(tnos_msgq_t *pmsgq, tnos_msgq_data_t **pmsgq_data);

/***********************************************************
* 功能描述：消息队列发送指针 发送数据(法2:发送指针发送数据)
* 输入参数：pmsgq 消息队列
*          ppdata 队列数据指针
*          data_len 发送数据的长度
*          is_first 是否(先进后出)
* 输出参数： 无
* 返 回 值：  0:成功 其它:错误
***********************************************************/
s32 tnos_msgq_send_ptr_next(tnos_msgq_t *pmsgq, tnos_msgq_data_t *pmsgq_data, u32 data_len, BOOL is_first);

/***********************************************************
 * 功能描述：消息队列 接收数据指针获取 (法2:获取接收指针)
 * 输入参数：pmsgq 消息队列
 *          timeout_ms 超时时间
 * 输出参数： pmsgq_data 队列数据指针
 * 返 回 值：  接收数据的长度, 负数或者0 失败
 * 注意: (返回> 0时,一定要释放 tnos_msgq_rev_ptr_next)
 *       返回的数据起始部分  TNOS_MSGQ_GET_BUF获取
 ***********************************************************/
s32 tnos_msgq_rev_ptr(tnos_msgq_t *pmsgq, tnos_msgq_data_t **pmsgq_data, u32 timeout_ms);

/***********************************************************
* 功能描述：消息队列 接收数据指针释放(法2:释放接收指针)
* 输入参数：pmsgq 消息队列
*          ppdata 队列数据指针
* 输出参数： 无
* 返 回 值：  无
***********************************************************/
void tnos_msgq_rev_ptr_next(tnos_msgq_t *pmsgq, tnos_msgq_data_t *pmsgq_data);

/***********************************************************
 * 功能描述：清空所有数据
 * 输入参数： pmsgq 消息队列
 * 输出参数： 无
 * 返 回 值： 无
 ***********************************************************/
void tnos_msgq_clean(tnos_msgq_t *pmsgq);


#endif

#if (TNOS_MSGCYC_ENABLE != 0) //消息循环缓冲
/******************************
 * 不允许发长度为0的数据(发送不出去)

 *
 * 提供2种接收方法:
 * 法1: 带缓存保护方法 tnos_msgcyc_rev (需要多次复制和额外的缓冲区)
 * 法2: 不带缓冲区保护方法 (可以修改对的数据, 数据长度不能超过 msg_size,否则队列崩溃)
 *        step1- 获取读取队列tnos_msgcyc_rev_ptr
 *        step2- 获取成功(返回长度 > 0),读取内容
 *        step3-释放队列 tnos_msgcyc_rev_ptr_next
 ***************************/


/***********************************************************
 * 功能描述 消息循环区 初始化
 * 输入参数：pmsgc    消息循环区
 *          pbuf      缓冲区起始位置
 *          buf_size  缓冲区大小
 * 输出参数： 无
 * 返 回 值：  0:成功 其它:失败
 *          最大消息大小为 buf_size - 4 - 1
 ***********************************************************/
s32 tnos_msgcyc_init(tnos_msgcyc_t *pmsgc, void *pbuf, u32 buf_size);

/***********************************************************
 * 功能描述：消息循环区 清空数据
 * 输入参数：pmsgc    消息循环区
 * 输出参数： 无
 * 返 回 值： 无
 ***********************************************************/
void tnos_msgcyc_clean(tnos_msgcyc_t *pmsgc);

/***********************************************************
 * 功能描述：消息循环区 获取空的大小
 * 输入参数：pmsgc    消息循环区
 * 输出参数： 无
 * 返 回 值：空的大小
 ***********************************************************/
u32 tnos_msgcyc_get_empty_num(tnos_msgcyc_t *pmsgc);

/***********************************************************
 * 功能描述：消息循环区 发送数据(先进先出)
 * 输入参数：pmsgc    消息循环区
 *          pbuf   发送数据缓冲区
 *          len    发送数据长度
 * 输出参数： 无
 * 返 回 值： 0:成功 其它:失败  TNOS_ERR_LESS:空间不够
 ***********************************************************/
s32 tnos_msgcyc_send(tnos_msgcyc_t *pmsgc, const void *pbuf, u32 len);

/***********************************************************
 * 功能描述：消息循环区接收数据
 * 输入参数：pmsgc    消息循环区
 *          buf_len  接收数据的长度
 *          timeout_ms 超时时间
 * 输出参数： pbuf 接收数据缓冲区
 * 返 回 值：  接收数据的长度,  负数和0失败
 ***********************************************************/
s32 tnos_msgcyc_rev(tnos_msgcyc_t *pmsgc, void *pbuf, u32 buf_len, u32 timeout_ms);

/***********************************************************
 * 功能描述：消息循环区 接收数据指针获取 (法2:获取指针)
 * 输入参数：pmsgqc消息循环区
 *          timeout_ms 超时时间
 * 输出参数： pbuf      接收后的数据位置(一定为4字节对齐)
 * 返 回 值：  接收数据的长度, 负数或者0 失败
 * 注意: (返回> 0时,一定要释放 tnos_msgcyc_rev_ptr_next)
 ***********************************************************/
s32 tnos_msgcyc_rev_ptr(tnos_msgcyc_t *pmsgc, u8 **pbuf, u32 timeout_ms);

/***********************************************************
* 功能描述：消息循环区 接收数据指针释放(法2:释放接收指针)
* 输入参数：pmsgq 消息队列
*          ppdata 队列数据指针
* 输出参数： 无
* 返 回 值：  无
***********************************************************/
void tnos_msgcyc_rev_ptr_next(tnos_msgcyc_t *pmsgc);

#endif


#endif
