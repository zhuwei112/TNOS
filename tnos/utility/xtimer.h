/***********************************************************
 * 版权信息:开源 GPLV2协议
 * 文件名称: xtimer.h
 * 文件作者: 朱巍
 * 完成日期:
 * 当前版本: 1.0.0
 * 主要功能: 定时器封装
 * 版本历史:
 ***********************************************************/
#ifndef XTIMER_H_
#define XTIMER_H_

#include "tnos_def.h"


/***********
 *定时器操作
 *定时模式分为:单次定时(set)
 *超时方式:查询(is_timeout)
 *调用顺序
 *1.设置定时 se
 *2. 查询超时或者等待超时
 *3.重复1 或者无效
 *注意:
 *   1.如果定时器已经超时,继续查询依然会超时
 *   2.2个   TICK_TIME_LOAD 间隔内必须调用一次get_time_tick (开SysTick_Handler 中断不用关注)
 ************/

#define TIMER_USE_STOP  0 //是否使用停止

/*延迟时间 选择宏定义  最长 总时间  12天!!! */
#define TIMER_MS(ms)             ((u32)(ms))                   //延迟  毫秒
#define TIMER_S(s)               (TIMER_MS(((u32)(s))*1000U))         //延时  秒
#define TIMER_S_MS(s, ms)        (TIMER_S(s) + TIMER_MS(ms))   //延迟 秒 和毫秒
#define TIMER_MIN_S(min, s)      (TIMER_S(((((u32)(min)) * 60U) + (s))))
#define TIMER_H_MIN_S(h, min, s) (TIMER_MIN_S(((((u32)(h)) * 60U) + (min)), s))  //延迟 时 和 分, 秒

#define TTIMER_BIT_TIMEOUT    31 //超时时间

#if (TIMER_USE_STOP != 0)
	#define TTIMER_BIT_STOP       30 //是否停止
#endif

#define TTIMER_MASK_DELAY     BIT_MSK(30) //延迟ms数


typedef struct
{
    s32 s;  //秒时间 (68年后溢出) (有符号方便计算)
    s16 ms; //ms             (有符号方便计算)
}time_tick_t;

typedef struct
{
    u32           ctrl;
    time_tick_t   tick_timeout; //超时的时间值
}ttimer_t;

/***********************************************************
 * 功能描述：设置延迟时间
 * 输入参数： ms 延迟时间(最大6天)
 *           ptick_now 时间 (不能为NULL)
 * 输出参数： 无
 * 返 回 值：  无
 ***********************************************************/
void ttimer_set2(ttimer_t *pthis, u32 ms, time_tick_t *ptick_now);

/***********************************************************
 * 功能描述：设置延迟时间
 * 输入参数： ms 延迟时间
 * 输出参数： 无
 * 返 回 值：  无
 ***********************************************************/
void ttimer_set(ttimer_t *pthis, u32 ms);


#if (TIMER_USE_STOP != 0)
/***********************************************************
 * 功能描述：停止计算器用不超时(ttimer_set, repeat 可重复开始)
 *           默认为启动状态
 *          停止后time_less 永远月正式
 *           is_timeout 不会超时
 * 输入参数：无
 * 输出参数：无
 * 返 回 值：  无
 ***********************************************************/
INLINE__ void ttimer_stop(ttimer_t *pthis) //停止不会朝
{
    pthis->ctrl = BIT(TTIMER_BIT_STOP);
}

/***********************************************************
 * 功能描述： 定时器是否停止
 * 输入参数：无
 * 输出参数：无
 * 返 回 值：  FALSE:没有, 其它停止
 ***********************************************************/
INLINE__ BOOL ttimer_is_stop(ttimer_t *pthis)
{
    return (pthis->ctrl & BIT(TTIMER_BIT_STOP)) ? TRUE : FALSE;
}
#endif

/***********************************************************
 * 功能描述：获取定时器延迟时间
 * 输入参数：pthis 结构体
 * 输出参数： 无
 * 返 回 值：  ms 延迟时间
 ***********************************************************/
INLINE__ u32 ttimer_get_delay(ttimer_t *pthis)
{
    return (pthis->ctrl & TTIMER_MASK_DELAY);
}

/***********************************************************
 * 功能描述：设置超时时间为上一次非停止的set时间(当前时间重新计算时间)
 * 输入参数： ptick_now 时间 (不能为NULL)
 * 输出参数： 无
 * 返 回 值：   无
 ***********************************************************/
INLINE__ void ttimer_repeat2(ttimer_t *pthis, time_tick_t *ptick_now)
{
    ttimer_set2(pthis, pthis->ctrl & TTIMER_MASK_DELAY, ptick_now);
}

/***********************************************************
 * 功能描述：设置超时时间为上一次非停止的set时间(当前时间重新计算时间)
 * 输入参数：无
 * 输出参数： 无
 * 返 回 值：   无
 ***********************************************************/
void ttimer_repeat(ttimer_t *pthis);

/***********************************************************
 * 功能描述：设置超时时间为上一次非停止的set时间(上次超时时间增加时间)
 * 输入参数：无
 * 输出参数： 无
 * 返 回 值：   无
 ***********************************************************/
void ttimer_repeat_abs(ttimer_t *pthis);

/***********************************************************
* 功能描述：强制让定时器超时(不影响set间隔时间)
* 输入参数： 无
* 输出参数： 无
* 返 回 值：  无
***********************************************************/
INLINE__ void ttimer_set_timeout(ttimer_t *pthis)
{
    pthis->ctrl |= BIT(TTIMER_BIT_TIMEOUT);
}

/***********************************************************
 * 功能描述：剩余的事件
 * 输入参数： ptick_now 比较时间 (不能为NULL)
 * 输出参数： 无
 * 返 回 值：  0 已超时或已经停止,  正数 剩余时间
 ***********************************************************/
u32 ttimer_time_less2(ttimer_t *pthis, time_tick_t *ptick_now);

/***********************************************************
 * 功能描述：剩余的事件
 * 输入参数： 无
 * 输出参数： 无
 * 返 回 值：  0 已超时或已经停止,  正数 剩余时间
 ***********************************************************/
u32 ttimer_time_less(ttimer_t *pthis);

/***********************************************************
 * 功能描述：查询是否已经超时
 * 输入参数： ptick_now 时间(比较的时间)(不能为NULL)
 * 输出参数： 无
 * 返 回 值：  FALSE 无, 其他超时 (停止后返回FALSE)
 ***********************************************************/
BOOL ttimer_is_timeout2(ttimer_t *pthis, time_tick_t *ptick_now);

/***********************************************************
 * 功能描述：查询是否已经超时(如果等待为us时间且< 500,不能用(不精确))
 * 输入参数： 无
 * 输出参数： 无
 * 返 回 值：  FALSE 无, 其他超时 (停止后返回FALSE)
 ***********************************************************/
BOOL ttimer_is_timeout(ttimer_t *pthis);

/***********************************************************
 * 功能描述：等待定时器超时(可精确5us以上的延迟)
 * 输入参数： 无
 * 输出参数： 无
 * 返 回 值：  无
 ***********************************************************/
void ttimer_wait_timeout(ttimer_t *pthis);

/***********************************************************
 * 功能描述：过去的时间
 * 输入参数： ptick_old 等待开始时间
 *           ptick_new 最后的时间
 * 输出参数： 无
 * 返 回 值：  过去的ms数
 ***********************************************************/
u32 pass_ticks(const time_tick_t *ptick_old, time_tick_t *ptick_new);

/***********************************************************
 * 功能描述：到现在过去的时间ms
 * 输入参数： ptick 等待开始时间
 * 输出参数： ptick_now 现在的时间 (NULL 不返回)
 * 返 回 值：  过去的ms数
 ***********************************************************/
u32 pass_ticks_now(const time_tick_t *ptick, time_tick_t *ptick_now);

/***********************************************************
 * 功能描述：比较时间大小
 * 输入参数：tnew 新的时间
 *          told  旧的时间
 * 输出参数： 无
 * 返 回 值：  1: tnew > told     0 : tnew = told    -1: tnew < told
 ***********************************************************/
s32 ticks_cmp(time_tick_t *tnew, time_tick_t *told);

/***********************************************************
 * 功能描述：延迟ms时间
 * 输入参数： 等待ms时间
 * 输出参数：  无
 * 返 回 值：  无
 ***********************************************************/
void ttimer_delay_ms(u32 ms);

/***********************************************************
 * 功能描述：延迟us时间
 * 输入参数：us 等待us时间
 * 输出参数：  无
 * 返 回 值：  无
 ***********************************************************/
void ttimer_delay_us(u32 us);


/***********************************************************
 * 功能描述：获取时间(没有加锁)
 * 输入参数：无
 * 输出参数：  ptick 获取的时间,不允许传输NULL
 * 返 回 值：  无
 ***********************************************************/
void get_time_tick2(time_tick_t *ptick);

/***********************************************************
 * 功能描述：获取时间
 * 输入参数：无
 * 输出参数：  ptick 获取的时间,不允许传输NULL
 * 返 回 值：  无
 ***********************************************************/
INLINE__ void get_time_tick(time_tick_t *ptick)
{
    irq_disable();

    get_time_tick2(ptick);
    irq_enable();
}




extern time_tick_t g_tick; //最近读的时间 (只允许外部读!!!)

#endif /* XTIMER_H_ */
